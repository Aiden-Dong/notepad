type: "MARKDOWN_NOTE"
folder: "199632a5d0d7fd0aac09"
title: "11 - java 进程分析"
content: '''
  11 - java 进程分析
  
  ---
  
  ### 1. 一次 java 进程分析
  
  通过spark监控界面找到task被分配到的机器，并登陆，通过jps -ml 打印出具体的java进程和main class信息（具体java命令行工具见java下文档）
  
  得到pid之后，使用top -p 观察该process，发现确实CPU占用非常高，说明某项操作将CPU占满，此时task并未失败，而是一直在进行
  
  通过top -Hp {pid}将该进程内部线程信息打印，获得哪条线程占用CPU高
  
  通过jstack {pid} 将进程堆栈打印，并将上一轮操作中获取的线程号在jstack文件中查询，定位线程（获取的线程号为十进制，需将获取的线程id转换为十六进制，再进行对照）
'''
tags: []
isStarred: false
isTrashed: true
createdAt: "2017-12-02T14:53:53.720Z"
updatedAt: "2019-03-26T04:08:37.957Z"
