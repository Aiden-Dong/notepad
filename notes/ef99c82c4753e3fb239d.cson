type: "MARKDOWN_NOTE"
folder: "e6c9bd1f0c13e9eccb37"
title: "6-python 正则表达式"
content: '''
  ### 6-python 正则表达式
  
  ----
  
  ### re.match函数:
  
  re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。
  
  ```
  re.match(pattern, string, flags=0)
  ```
  
  参数说明　:
  
  参数　| 说明
  -- | --
  pattern | 匹配的正则表达式
  string	| 要匹配的字符串。
  flags | 标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。
  
  
  我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。
  
  方法 | 说明
  -- | --
  group(num=0) | 匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。
  groups() | 	返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。
  
  ### re.search方法:
  
  re.search 扫描整个字符串并返回第一个成功的匹配。
  
  ```
  re.search(pattern, string, flags=0)
  ```
  
  参数　| 描述
  pattern | 匹配的正则表达式
  string | 要匹配的字符串。
  flags	 | 标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。
  
  我们可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。
  
  
  > re.match与re.search的区别
  
  re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。
  
  
  > flags :
  
  修饰　| 说明
  -- | --
  re.I | 使匹配对大小写不敏感
  re.L | 做本地化识别（locale-aware）匹配
  re.M | 多行匹配，影响 ^ 和 $
  re.S | 使 . 匹配包括换行在内的所有字符
  re.U | 根据Unicode字符集解析字符。这个标志影响 \\w, \\W, \\b, \\B.
  re.X | 该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。
  
  ### sub 
  
  Python 的 re 模块提供了re.sub用于替换字符串中的匹配项。
  
  ```
  re.sub(pattern, repl, string, count=0, flags=0)
  ```
  
  参数　| 说明
  -- | --
  pattern | 正则中的模式字符串。
  repl | 替换的字符串，也可为一个函数。
  string | 要被查找替换的原始字符串。
  count | 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。
  
  
  
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-28T03:42:53.914Z"
updatedAt: "2017-08-29T10:22:24.809Z"
