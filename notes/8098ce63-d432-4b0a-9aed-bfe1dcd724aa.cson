createdAt: "2018-04-10T15:00:23.111Z"
updatedAt: "2018-04-11T12:23:33.777Z"
type: "MARKDOWN_NOTE"
folder: "ceae56396fb314adeed3"
title: "2-第一个Spring Boot应用程序"
content: '''
  ### 2-第一个Spring Boot应用程序
  
  ---
  
  
  ### 创建POM依赖
  
  
  ```
  <?xml version="1.0" encoding="UTF-8"?>
  <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  	<modelVersion>4.0.0</modelVersion>
  
  	<groupId>com.example</groupId>
  	<artifactId>myproject</artifactId>
  	<version>0.0.1-SNAPSHOT</version>
  
  	<parent>
  		<groupId>org.springframework.boot</groupId>
  		<artifactId>spring-boot-starter-parent</artifactId>
  		<version>2.0.1.RELEASE</version>
  	</parent>
  
  	<!-- Additional lines to be added here... -->
    
    <dependencies>
        <!-- Spring web 组件 spring+springMvc+mybatis-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>
  </project>
  ```
  
  
  ### 编写代码:
  
  
  为了完成我们的应用程序，我们需要创建一个Java文件。默认情况下，Maven编译源代码src/main/java，因此您需要创建该文件夹结构，然后添加一个名为`src/main/java/Example.java`包含以下代码的文件：
  
  
  ```
  import org.springframework.boot.*;
  import org.springframework.boot.autoconfigure.*;
  import org.springframework.web.bind.annotation.*;
  
  @RestController
  @EnableAutoConfiguration
  public class Example {
  
  	@RequestMapping("/")
  	String home() {
  		return "Hello World!";
  	}
  
  	public static void main(String[] args) throws Exception {
  		SpringApplication.run(Example.class, args);
  	}
  
  }
  ```
  
  我们`Example`的第一个注释是`@RestController`。这被称为**stereotype**印记。
  它为阅读代码的人提供了线索，对于Spring来说，这个类扮演着特定的角色。
  在这种情况下，我们的类是一个Web`@Controller`，所以Spring在处理传入的Web请求时会考虑它。
  
  该`@RequestMapping`注释提供**Rote**的信息。它告诉Spring，任何带有`/`路径的HTTP请求都应映射到该home方法。
  该 `@RestController`注释告诉Spring将结果字符串直接呈现给调用者。
  
  > 在`@RestController`与`@RequestMapping`注解是Spring MVC的注解。（它们并不特定于Spring Boot。）有关更多详细信息，请参阅Spring参考手册中的MVC部分。
  
  
  #### 2. @EnableAutoConfiguration 注解
  
  第二个级别注释是`@EnableAutoConfiguration`。这个注解告诉Spring Boot根据你添加的jar依赖来猜测你想要如何配置Spring。
  自从`spring-boot-starter-web`添加了Tomcat和Spring MVC之后，自动配置假定您正在开发一个Web应用程序并据此设置Spring。
  
  
  #### 3. main 方法:
  
  我们应用程序的最后一部分是该main方法。
  这只是一个遵循Java约定的应用程序入口点的标准方法。我们的 main方法通过调用`SpringApplication.run()`委托给**Spring Boot**。 
  SpringApplication引导我们的应用程序，从Spring开始，然后启动自动配置的Tomcat Web服务器。
  我们需要Example.class将该run方法的参数作为参数传入，以确定SpringApplication哪些是主要的Spring组件。命令行参数也通过args传递。
  
  
  ### 运行实例:
  
  在这一点上，你的应用程序应该工作。由于您使用了`spring-boot-starter-parent` POM， 因此您可以使用一个有用的目标来启动应用程序。从根项目目录中键入`mvn spring-boot:run`以启动应用程序。
  您应该看到类似于以下内容的输出
  
  ```
  $ mvn spring-boot:run
  
    .   ____          _            __ _ _
   /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\
  ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\
   \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )
    '  |____| .__|_| |_|_| |_\\__, | / / / /
   =========|_|==============|___/=/_/_/_/
   :: Spring Boot ::  (v2.0.1.RELEASE)
  ....... . . .
  ....... . . . (log output here)
  ....... . . .
  ........ Started Example in 2.222 seconds (JVM running for 6.514)
  ```
  
  > localhost:8080
  
  ```
  Hello World!
  ```
  
  
  #### 创建可执行jar:
  
  我们通过创建一个完全独立的可执行jar文件来完成我们的示例，该文件可以在生产环境中运行。
  可执行jar（有时称为`fat jars`)是包含您的编译类以及代码需要运行的所有jar依赖项的归档。
  
  
  要创建一个可执行的jar，我们需要添加`spring-boot-maven-plugin`到我们的pom.xml。
  为此，请在该dependencies部分正下方插入以下几行：
  
  ```
  <build>
  	<plugins>
  		<plugin>
  			<groupId>org.springframework.boot</groupId>
  			<artifactId>spring-boot-maven-plugin</artifactId>
  		</plugin>
  	</plugins>
  </build>
  ```
  
  > mvn package
  
  ```
  [INFO] Scanning for projects...
  [INFO]
  [INFO] ------------------------------------------------------------------------
  [INFO] Building myproject 0.0.1-SNAPSHOT
  [INFO] ------------------------------------------------------------------------
  [INFO] .... 
  [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ myproject ---
  [INFO] Building jar: /Users/developer/example/spring-boot-example/target/myproject-0.0.1-SNAPSHOT.jar
  [INFO]
  [INFO] --- spring-boot-maven-plugin:2.0.1.RELEASE:repackage (default) @ myproject ---
  [INFO] ------------------------------------------------------------------------
  [INFO] BUILD SUCCESS
  [INFO] -----------------------------------------------------------------------
  ```
  
  > java -jar
  
  ```
  $ java -jar target/myproject-0.0.1-SNAPSHOT.jar
  
    .   ____          _            __ _ _
   /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\
  ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\
   \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )
    '  |____| .__|_| |_|_| |_\\__, | / / / /
   =========|_|==============|___/=/_/_/_/
   :: Spring Boot ::  (v2.0.1.RELEASE)
  ....... . . .
  ....... . . . (log output here)
  ....... . . .
  ........ Started Example in 2.536 seconds (JVM running for 2.864)
  
  
  > 也可以这样启动
  
  $ java -cp target/myproject-0.0.1-SNAPSHOT.jar -Dloader.main=com.mobvista. org.springframework.boot.loader.PropertiesLauncher
  ```
'''
tags: []
isStarred: false
isTrashed: false
