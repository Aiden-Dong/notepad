type: "MARKDOWN_NOTE"
folder: "ec02fab285e14c31f180"
title: "1- 变量篇"
content: '''
  ### 1- 变量篇
  
  ---
  
  ### 1.变量的赋值:
  
  **1.1 本地变量 :**
  
  只在当前shell中生效的变量
  
  ```
  var_test=test
  ```
  
  **1.2 局部变量 :**
  
  只在当前作用域生效的变量
  
  ```
  function local_func()
  {
    local v_test=test
  }
  ```
  
  **1.3 环境变量 :**
  
  环境变量会在 **当前Shell** 和 **这个Shell的所有子Shell** 当中生效。
  
  ```
  export TEST=test
  ```
  
  > 特殊的赋值方法 :
  
  1.1 给字符串所代表的变量赋值: 
  
  ```
  TEST="test"
  var_str="TEST"
  
  echo ${var_str}   # TEST
  echo ${!var_str}  # test
  ```
  `${!varible}` : 这种方式能够将 vaible 的变量值当做变量名去取值。
  
  
  1.2 bash 数组
  
  ```
  one=(1 2 3 4 5 6)
  
  echo "varibale : ${one[@]}"  # 获取所有数组元素
  echo "split : ${#one[@]}"    # 数组长度
  echo ${one[4]}               # 索引数组内容内容
  ```
  
  ---
  
  ### 2.默认变量：
  
  `$0` : 执行脚本文件名
  `$1` : 第一个参数
  `$2` : 第二个参数
  `$#` : 代表参数个数
  `$@` : 代表 "$1" "$2" "$3" "$4" 。。。 , 每个变量独立
  `$*` : 代表 "$1 $2 $3 $4 ...."
  `$?` : 代表上一个运行命令返回值
  `$!` : 代表上一个运行命令的进程 ID
  
  
  ${BASH_SOURCE} | ${BASH_SOURCE[0]} : 代表执行的脚本名称[路径形式与运行命令时候的带入方式是一致的]
  
  ---
  
  ### 3. 变量操作
  
  ```
  str="abcd"
  echo ${#str}               # 获取字符串长度
  echo ${str:1:4}            # 截取子字符串
  
  ${变量#关键字}	              # 从左边开始删除第一个匹配项 
  ${变量##关键字}	            # 从左边开始删除最长的匹配项
  ${变量%关键字}               # 从右边开始删除第一个匹配项
  ${变量%%关键字}              # 从右边开始删除最长匹配项
  ${变量/旧字符串/新字符串}      # 从左边找到第一个匹配项替换
  ${变量//旧字符串//新字符串}    # 找到所有匹配的字符串替换 
  
  
  ### 测试
  
  for v_line in $(env)
  do
    echo "${v_line%%=*} ----- ${v_line#*=}"
  done
  
  
  -> 数组:
  
  VAR[index] = count;
  ```
  
  #### 变量高级处理:
  
  `${myname:-'nick'}` 判断条件，如果myname存在，就返回值，如果myname不存在，就把-后接的字符串当做整个变量扩展的结果，并传回
  `${count:=100}` 若变量coutn没有值或为空，则把待测变量设定为默认值
  `${myname:?"your input error"}` 测试变量不存在或为空，传回错误信息
  
  > 测试变量的存在性:
  
  ${myname:+Ture} : 若变量存在且值非空，则符合判断
  
  ```
  ：  空              测空置
  -   负向            测不存在
  +   正向            测存在
  ？  有问题            检查是否完备后再来执行吧
  =   设值            给控值变量设定一个默认值
  ```
  
  
  
  > #### 常用的小命令
  
  ```
  type [-tpa] name :          # 获取每个命令是否是bash的内置命令	
  read [-pt] variable         # 从键盘中读取输入的变量	| p : 后面加提示符 | t : 后面加等待秒数
  declare [-aixr] variable    # 更改变量的类型
  ulimit                      # 设置用户的一些权限
  source 	filename            # 配置文件名
  cut -d '' -f n              # 用于分隔字符
  grep                        # 正则匹配
  sort [-rtk] [file or stdin]	# 排序 
  uniq [-ic]                  # 合并相同的行
  wc  [-lwm]                  # 显示字数
  sed 工具:
  
  		[n1[,n2]] function
  
  		function : a c d i p s 
  
  		-> sed 's/要被替换的字符串/新的字符串/g'
  ```
  
  
  
  > **实例**：
  
  特殊变量
  
  ```
  #!/bin/bash
  
  num=1
  
  echo "The name of this script is \\" $0 \\" ."
  echo 
  
  if [ -n $1 ]
  then 
  	echo "The first parameter is $1"
  fi
  
  if [ -n $2 ]
  then 
  	echo "The secound parameter is $2"
  fi
  
  if [ -n $3 ]
  then 
  	echo "The third parameter is $3"
  fi
  
  echo
  
  for var in $@
  do
  	echo "The $num parameter is $var"
  	let num=num+1 
  done
  
  echo 
  echo "all the command_line parameters arg is: \\" $* \\" ."
  echo "the \\$\\# paramter is \\" $# \\" ."
  exit 0
  ```
  使用变量
  
  ```
  #!/bin/bash
  
  var=1
  let var2=2
  
  echo "var=$var"
  echo "var2=$var2"
  
  let var2=var+2
  echo "var2=$var2"
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-19T09:53:46.117Z"
updatedAt: "2018-07-19T07:54:10.115Z"
