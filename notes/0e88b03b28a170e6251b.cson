type: "MARKDOWN_NOTE"
folder: "ec02fab285e14c31f180"
title: "1- 变量篇"
content: '''
  ### 1- 变量篇
  
  ---
  
  **说明**：
  
  -> 变量与变量内容以等号链接, 等号两边不能有空格， 变量名开头不能使用数字
  -> 变量内容有空格可以使用空格链接起来
  -> 单引号内的字符为一般字符，不进行翻译 如：  SETTEXT="one is '$LANG'"
  -> 执行命令可以使用 $(), 或 反单引号 来调用字符串
  -> 使用变量的两种方式:
  
  ```
  1> $VARNAME
  2> ${VARNAME}
  ```
  -> export VARNAME	// 将变量变成环境变量
  
  #### 2.默认变量：
  
  ```
  $0 : 执行脚本文件名
  $1 : 第一个参数
  .........
  $# : 代表参数个数
  $@ : 代表 "$1" "$2" "$3" "$4" 。。。 , 每个变量独立
  $* : 代表 "$1 $2 $3 $4 ...."
  $? : 代表上一个运行命令返回值
  $! : 代表上一个运行命令的进程 ID
  ```
  
  #### 3. 字符串操作篇
  
  ```
  str="abcd"
  echo ${#str}               # 获取字符串长度
  echo ${str:1:4}            # 截取子字符串
  
  ${变量#关键字}	              # 从左边开始删除第一个匹配项 
  ${变量##关键字}	            # 从左边开始删除最长的匹配项
  ${变量%关键字}               # 从右边开始删除第一个匹配项
  ${变量%%关键字}              # 从右边开始删除第一个匹配项
  ${变量/旧字符串/新字符串}      # 从左边找到第一个匹配项替换
  ${变量//旧字符串//新字符串}    # 找到所有匹配的字符串替换 
  ```
  
  -> 数组:
  ```
  VAR[index] = count;
  ```
  
  > #### 常用的小命令
  
  ```
  type [-tpa] name :          # 获取每个命令是否是bash的内置命令	
  read [-pt] variable         # 从键盘中读取输入的变量	| p : 后面加提示符 | t : 后面加等待秒数
  declare [-aixr] variable    # 更改变量的类型
  ulimit                      # 设置用户的一些权限
  source 	filename            # 配置文件名
  cut -d '' -f n              # 用于分隔字符
  grep                        # 正则匹配
  sort [-rtk] [file or stdin]	# 排序 
  uniq [-ic]                  # 合并相同的行
  wc  [-lwm]                  # 显示字数
  sed 工具:
  
  		[n1[,n2]] function
  
  		function : a c d i p s 
  
  		-> sed 's/要被替换的字符串/新的字符串/g'
  ```
  
  
  
  > **实例**：
  
  特殊变量
  
  ```
  #!/bin/bash
  
  num=1
  
  echo "The name of this script is \\" $0 \\" ."
  echo 
  
  if [ -n $1 ]
  then 
  	echo "The first parameter is $1"
  fi
  
  if [ -n $2 ]
  then 
  	echo "The secound parameter is $2"
  fi
  
  if [ -n $3 ]
  then 
  	echo "The third parameter is $3"
  fi
  
  echo
  
  for var in $@
  do
  	echo "The $num parameter is $var"
  	let num=num+1 
  done
  
  echo 
  echo "all the command_line parameters arg is: \\" $* \\" ."
  echo "the \\$\\# paramter is \\" $# \\" ."
  exit 0
  ```
  使用变量
  
  ```
  #!/bin/bash
  
  var=1
  let var2=2
  
  echo "var=$var"
  echo "var2=$var2"
  
  let var2=var+2
  echo "var2=$var2"
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-19T09:53:46.117Z"
updatedAt: "2017-10-09T03:46:33.642Z"
