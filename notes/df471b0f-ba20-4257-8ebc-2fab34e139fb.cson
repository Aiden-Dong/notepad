createdAt: "2018-04-20T15:34:17.484Z"
updatedAt: "2018-05-16T08:42:21.867Z"
type: "MARKDOWN_NOTE"
folder: "ceae56396fb314adeed3"
title: "4-Spring web MVC　框架"
content: '''
  ### 4-Spring web MVC　框架
  
  ---
  
  原文: [Spring MVC快速入门教程-java,spring-mvc,springboot 相关文章-天码营](https://www.tianmaying.com/tutorial/spring-mvc-quickstart)
  
  
  ### 1. 一个简单的web应用
  
  使用Spring Boot框架可以大大加速Web应用的开发过程，首先在Maven项目依赖中引入`spring-boot-starter-web`：
  
  **pom.xml**
  
  ```
  <?xml version="1.0" encoding="UTF-8"?>
  <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
  
    <groupId>com.tianmaying</groupId>
    <artifactId>spring-web-demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>
  
    <name>spring-web-demo</name>
    <description>Demo project for Spring WebMvc</description>
  
    <parent>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-parent</artifactId>
      <version>1.2.5.RELEASE</version>
      <relativePath/>
    </parent>
  
    <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <java.version>1.8</java.version>
    </properties>
  
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
      </dependency>
    </dependencies>
  
    <build>
      <plugins>
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
      </plugins>
    </build>
  
  </project>
  ```
  
  接下来创建`src/main/java/com.tmy.Application.java`:
  ```
  package com.tmy;
  
  import org.springframework.boot.SpringApplication;
  import org.springframework.boot.autoconfigure.SpringBootApplication;
  import org.springframework.web.bind.annotation.RequestMapping;
  import org.springframework.web.bind.annotation.RestController;
  
  @SpringBootApplication
  
  public class Application {
      public static void main(String[] args) {
          SpringApplication.run(Application.class, args);
      }
  }
  ```
  `SpringApplication`是Spring Boot框架中描述Spring应用的类，它的`run()`方法会创建一个Spring应用上下文(**Application Context**）。
  另一方面它会扫描当前应用类路径上的依赖，例如本例中发现**spring-webmvc**（由 `spring-boot-starter-web`传递引入）在类路径中，那么Spring Boot会判断这是一个Web应用，并启动一个内嵌的Servlet容器（默认是Tomcat）用于处理HTTP请求。
  
  **Spring WebMvc**框架会将Servlet容器里收到的HTTP请求根据路径分发给对应的`@Controller`类进行处理，`@RestController`是一类特殊的`@Controller`，它的返回值直接作为HTTP Response的Body部分返回给浏览器。
  
  `@RequestMapping`注解表明该方法处理那些URL对应的HTTP请求，也就是我们常说的URL路由（routing)，请求的分发工作是有Spring完成的。
  
  
  #### 2. 使用`@Controller`实现URL路由
  
  现代Web应用往往包括很多页面，不同的页面也对应着不同的URL。对于不同的URL，通常需要不同的方法进行处理并返回不同的内容。
  
  ##### 匹配多个URL
  
  ```
  @RestController
  public class Application {
  
      @RequestMapping("/")
      public String index() {
          return "Index Page";
      }
  
      @RequestMapping("/hello")
      public String hello() {
          return "Hello World!";
      }
  }
  ```
  `@RequestMapping`可以注解`@Controller`类：
  
  ```
  @RestController
  @RequestMapping("/classPath")
  public class Application {
      @RequestMapping("/methodPath")
      public String method() {
          return "mapping url is /classPath/methodPath";
      }
  }
  ```
  **method**方法匹配的URL是`/classPath/methodPath"`。
  
  > 提示:
  
  可以定义多个`@Controller`将不同URL的处理方法分散在不同的类中。
  
  #### 支持HTTP方法
  
  对于HTTP请求除了其URL，还需要注意它的方法（Method）。
  例如我们在浏览器中访问一个页面通常是GET方法，而表单的提交一般是POST方法。
  `@Controller`中的方法同样需要对其进行区分：
  
  ```
  @RequestMapping(value = "/login", method = RequestMethod.GET)
  public String loginGet() {
      return "Login Page";
  }
  
  @RequestMapping(value = "/login", method = RequestMethod.POST)
  public String loginPost() {
      return "Login Post Request";
  }
  ```
  
  Spring MVC最新的版本中提供了一种更加简洁的配置HTTP方法的方式，增加了四个标注：
  
  - `@PutMapping` : PUT方法用来添加的资源
  - `@GetMapping` : GET方法用来获取已有的资源
  - `@PostMapping` : POST方法用来对资源进行状态转换
  - `@DeleteMapping` : DELETE方法用来删除已有的资源
  
  
  #### 3.处理静态文件
  
  浏览器页面使用HTML作为描述语言，那么必然也脱离不了CSS以及JavaScript。为了能够浏览器能够正确加载类似`/css/style.css`, `/js/main.js`等资源，
  默认情况下我们只需要在`src/main/resources/static`目录下添加`css/style.css`和`js/main.js`文件后，Spring MVC能够自动将他们发布，通过访问`/css/style.css`, `/js/main.js`也就可以正确加载这些资源。
  
  
'''
tags: []
isStarred: false
isTrashed: false
