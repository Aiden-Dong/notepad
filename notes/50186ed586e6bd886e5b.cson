type: "MARKDOWN_NOTE"
folder: "826d02692db86deab330"
title: "4- java 解析 json 的方式"
content: '''
  ### 4- java 解析 json 的方式
  
  ---
  
  json 的解析包:
  
  ```
  <!-- https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl -->
  <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
      <version>1.9.13</version>
  </dependency>
  ```
  
  #### 1-数据转 jsonNode 格式:
  
  > 标准形式 
  
  ```
  ObjectMapper mapper = new ObjectMapper();
  JsonFactory factory = new JsonFactory();
  JsonParser parser = factory.createJsonParser(json);
  JsonNode node = mapper.readTree(parser);
  ```
  
  > String 转 jsonNode
  
  ```
  public static JsonNode parseJSONFromString(String json) throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    JsonFactory factory = new JsonFactory();
    JsonParser parser = factory.createJsonParser(json);
    JsonNode node = mapper.readTree(parser);
    return node;
  }
  ```
  
  > File 转JsonNode
  
  ```
  public static JsonNode parseJSONFromFile(File file) throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    JsonFactory factory = new JsonFactory();
    JsonParser parser = factory.createJsonParser(file);
    JsonNode node = mapper.readTree(parser);
    
    return node;
  }
  ```
  
  > Reader转JsonNode
  
  ```
  public static JsonNode parseJSONFromReader(Reader reader) throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    JsonFactory factory = new JsonFactory();
    JsonParser parser = factory.createJsonParser(reader);
    JsonNode node = mapper.readTree(parser);
    
    return node;
  }
  ```
  
  #### 2-JsonNode 转 object 
  
  ```
  private static Object toObjectFromJSONNode(JsonNode node) {
    if (node.isObject()) {
      HashMap<String, Object> obj = new HashMap<String, Object>();
      Iterator<String> iter = node.getFieldNames();
      while (iter.hasNext()) {
        String fieldName = iter.next();
        JsonNode subNode = node.get(fieldName);
        Object subObj = toObjectFromJSONNode(subNode);
        obj.put(fieldName, subObj);
      }
  
      return obj;
    } else if (node.isArray()) {
      ArrayList<Object> array = new ArrayList<Object>();
      Iterator<JsonNode> iter = node.getElements();
      while (iter.hasNext()) {
        JsonNode element = iter.next();
        Object subObject = toObjectFromJSONNode(element);
        array.add(subObject);
      }
      return array;
    } else if (node.isTextual()) {
      return node.asText();
    } else if (node.isNumber()) {
      if (node.isInt()) {
        return node.asInt();
      } else if (node.isLong()) {
        return node.asLong();
      } else if (node.isDouble()) {
        return node.asDouble();
      } else {
        System.err.println("ERROR What is this!? " + node.getNumberType());
        return null;
      }
    } else if (node.isBoolean()) {
      return node.asBoolean();
    } else {
      return null;
    }
  }
  ```
  
  
  #### 3-Object 转 Json
  
  ```
  public static String toJSON(Object obj, boolean prettyPrint) {
    ObjectMapper mapper = new ObjectMapper();
  
    try {
      if (prettyPrint) {
        ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();
        return writer.writeValueAsString(obj);
      }
      return mapper.writeValueAsString(obj);
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
  ```
  
  
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-20T06:19:28.329Z"
updatedAt: "2017-09-20T08:20:01.565Z"
