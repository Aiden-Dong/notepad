type: "MARKDOWN_NOTE"
folder: "fec47565a0577152774f"
title: "２- K 近邻算法概述(KNN)"
content: '''
  ２- K 近邻算法概述(KNN)
  
  ---
  
  k 近邻采用测量不同特征值之间的距离方法进行分类。
  
  算法举例:
  
  ```
  #!/usr/bin/env python
  #-*- coding:utf8 -*-
  
  import numpy
  import numpy as np
  
  # [X1, X2, X3, ..., Xn] -> [y1, y2, y3, ... yn]
  # X 为向量矩阵， y 为标签值
  # 向量矩阵跟向量对应的标签横向扩展，方便计算
  
  def createDataset():
      dataset=numpy.array([[1,2], [2,3], [3,2], [-1,2],[-2,2],[-2,1]]).T
      titles=numpy.array(['A','A','A','B','B','B'])
  
      return dataset,titles
  
  def knnGetTitle(inX, dataset, titles, k):
  
      """
      首先计算出输入向量与所有向量之间的距离
      然后按照距离排序
      从距离最近的前 k 个标签中，找到出现的频率最高的标签来
      """
  
      metricSet=dataset-inX  # 向量广播求差集
      metricSet=metricSet**2
      metricSet=metricSet.sum(axis=0)
      metricSet=metricSet**0.5
  
  
      sortArg=metricSet.argsort()
  
      argCount={}   # title:count
  
      for i in range(k):
          key=titles[sortArg[i]]
          argCount[key] = argCount.get(key, 0) +1
  
      sortCount=sorted(argCount.items(), key=lambda b:b[1], reverse=True)
  
      print(dataset)
      return sortCount[0][0]
  
  def main():
      X=numpy.array([3,4])
      X=X.reshape(X.shape[0],1)
  
      dataset,titles=createDataset()
      res = knnGetTitle(inX=X, dataset=dataset, titles=titles, k=4)
      print(res)
      dataset=np.hstack((dataset, X))
      titles=np.hstack((titles, res))
  
      print(dataset,titles)
  
  if __name__ == '__main__':
      main()
  
  ```
  
  
  knn 对约会网站人群分类
  
  ```
  #!/usr/bin/env python
  # -*- coding:utf-8 -*-
  
  import numpy
  import numpy as np
  import matplotlib
  import matplotlib.pyplot as plt
  import knn
  
  def fileToDataset(dataFile):
      dataset=numpy.array([]);
      titles=[]
  
      fin=open(name=dataFile, mode="r")
  
      for v_line in fin :
          v_line = v_line.strip()
          v_item=v_line.split("\\t")
  
          if len(v_item) is not 4 :
              continue
  
          vector=numpy.array([float(v_item[0]),float(v_item[1]),float(v_item[2])]).reshape(3,1)
  
          #print(vector)
          if dataset.shape[0] is 0:
              dataset = vector
          else :
              dataset = np.hstack((dataset, vector))
  
          titles = np.hstack((titles, v_item[3]))
  
      return dataset,titles
  
  def autoNorma(dataSet):
      """
      归一化数值
      """
      KmSum=max(dataSet[0,:]) - min(dataSet[0,:])
      gameSum=max(dataSet[1,:]) - min(dataSet[1,:])
      moneySum=max(dataSet[2,:]) - min(dataSet[2,:])
  
      setSum=numpy.array([KmSum, gameSum, moneySum]).reshape(3,1)
  
      dataSet = dataSet/setSum
  
      return dataSet
  
  
  def main():
      dataset,titles=fileToDataset('datingTestSet.txt')
  
      metaset=autoNorma(dataset)
  
      m=len(metaset[1,:])/2
      errorCount=0
  
      for i in range(m):
          inX=metaset[:,i].reshape(3,1)
          res = knn.knnGetTitle(inX=inX,dataset=metaset[:,m:-1],titles=titles[m:-1], k=10)
  
          print("%d record test : res[%s] is %s" % (i, res, titles[i]))
  
          if res != titles[i]:
              errorCount=errorCount+1
  
      print("error count %d of %f" % (errorCount, float(errorCount)/m))
  
  if __name__ == '__main__':
      main()
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-11-07T14:01:13.615Z"
updatedAt: "2017-11-08T15:57:17.164Z"
