type: "MARKDOWN_NOTE"
folder: "fec47565a0577152774f"
title: "２- K 近邻算法概述(KNN)"
content: '''
  ### ２- K 近邻算法概述(KNN)
  
  ---
  
  #### 介绍
  
  ![](http://img.my.csdn.net/uploads/201711/09/1510236044_9732.jpg)
  
  KNN最邻近规则，主要应用领域是对未知事物的识别，即判断未知事物属于哪一类，判断思想是，基于欧几里得定理，判断未知事物的特征和哪一类已知事物的的特征最接近；
  
  K最近邻(k-Nearest Neighbor，KNN)分类算法，是一个理论上比较成熟的方法，也是最简单的机器学习算法之一。该方法的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。KNN算法中，所选择的邻居都是已经正确分类的对象。该方法在定类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别。 KNN方法虽然从原理上也依赖于极限定理，但在类别决策时，只与极少量的相邻样本有关。由于KNN方法主要靠周围有限的邻近的样本，而不是靠判别类域的方法来确定所属类别的，因此对于类域的交叉或重叠较多的待分样本集来说，KNN方法较其他方法更为适合。
  
  KNN算法不仅可以用于分类，还可以用于回归。通过找出一个样本的k个最近邻居，将这些邻居的属性的平均值赋给该样本，就可以得到该样本的属性。更有用的方法是将不同距离的邻居对该样本产生的影响给予不同的权值(weight)，如权值与距离成正比（组合函数）。
  
  #### 距离计算
  
  knn 中计算样本之间的距离是通过向量之间的距离来实现的。
  
  如:
  
  **向量$$|x_1,x_2, ...,x_n|^T$$ 与　向量$$|y_1,y_2,...y_n|^T$$　之间的距离。**
  
  ![](http://img.my.csdn.net/uploads/201711/09/1510236881_3085.jpg)
  
  
  > 该算法在分类时有个主要的不足
  
  当样本不平衡时，如一个类的样本容量很大，而其他类样本容量很小时，有可能导致当输入一个新样本时，该样本的K个邻居中大容量类的样本占多数。 该算法只计算“最近的”邻居样本，某一类的样本数量很大，那么或者这类样本并不接近目标样本，或者这类样本很靠近目标样本。无论怎样，数量并不能影响运行结果。可以采用权值的方法（和该样本距离小的邻居权值大）来改进。该方法的另一个不足之处是计算量较大，因为对每一个待分类的文本都要计算它到全体已知样本的距离，才能求得它的K个最近邻点。目前常用的解决方法是事先对已知样本点进行剪辑，事先去除对分类作用不大的样本。该算法比较适用于样本容量比较大的类域的自动分类，而那些样本容量较小的类域采用这种算法比较容易产生误分。
  还有就是无法给出数据的内在含义。
  
  #### 过程:
  
  简单来说，K-NN可以看成：有那么一堆你已经知道分类的数据，然后当一个新数据进入的时候，就开始跟训练数据里的每个点求距离，然后挑离这个训练数据最近的K个点看看这几个点属于什么类型，然后用少数服从多数的原则，给新数据归类。
  
  ```
  step.1---初始化距离为最大值
  step.2---计算未知样本和每个训练样本的距离dist
  step.3---得到目前K个最临近样本中的最大距离maxdist
  step.4---如果dist小于maxdist，则将该训练样本作为K-最近邻样本
  step.5---重复步骤2、3、4，直到未知样本和所有训练样本的距离都算完
  step.6---统计K-最近邻样本中每个类标号出现的次数
  step.7---选择出现频率最大的类标号作为未知样本的类标号
  ```
  
  
  
  算法实现:
  
  ```
  #!/usr/bin/env python
  #-*- coding:utf8 -*-
  # knn.py
  
  import numpy
  import numpy as np
  
  # [X1, X2, X3, ..., Xn] -> [y1, y2, y3, ... yn]
  # X 为向量矩阵， y 为标签值
  # 向量矩阵跟向量对应的标签横向扩展，方便计算
  
  def createDataset():
      dataset=numpy.array([[1,2], [2,3], [3,2], [-1,2],[-2,2],[-2,1]]).T
      titles=numpy.array(['A','A','A','B','B','B'])
  
      return dataset,titles
  
  # 核心计算代码
  def knnGetTitle(inX, dataset, titles, k):
  
      """
      首先计算出输入向量与所有向量之间的距离
      然后按照距离排序
      从距离最近的前 k 个标签中，找到出现的频率最高的标签来
      """
  
      metricSet=dataset-inX  # 向量广播求差集
      metricSet=metricSet**2
      metricSet=metricSet.sum(axis=0)
      metricSet=metricSet**0.5
  
  
      sortArg=metricSet.argsort()
  
      argCount={}   # title:count
  
      for i in range(k):
          key=titles[sortArg[i]]
          argCount[key] = argCount.get(key, 0) +1
  
      sortCount=sorted(argCount.items(), key=lambda b:b[1], reverse=True)
  
      print(dataset)
      return sortCount[0][0]
  
  def main():
      X=numpy.array([3,4])
      X=X.reshape(X.shape[0],1)
  
      dataset,titles=createDataset()
      res = knnGetTitle(inX=X, dataset=dataset, titles=titles, k=4)
      print(res)
      dataset=np.hstack((dataset, X))
      titles=np.hstack((titles, res))
  
      print(dataset,titles)
  
  if __name__ == '__main__':
      main()
  
  ```
  
  
  knn 对约会网站人群分类
  
  ```
  #!/usr/bin/env python
  # -*- coding:utf-8 -*-
  # webtalk.py
  
  import numpy
  import numpy as np
  import knn
  
  def fileToDataset(dataFile):
      dataset=numpy.array([]);
      titles=[]
  
      fin=open(name=dataFile, mode="r")
  
      for v_line in fin :
          v_line = v_line.strip()
          v_item=v_line.split("\\t")
  
          if len(v_item) is not 4 :
              continue
  
          vector=numpy.array([float(v_item[0]),float(v_item[1]),float(v_item[2])]).reshape(3,1)
  
          #print(vector)
          if dataset.shape[0] is 0:
              dataset = vector
          else :
              dataset = np.hstack((dataset, vector))
  
          titles = np.hstack((titles, v_item[3]))
  
      return dataset,titles
  
  def autoNorma(dataSet):
      """
      归一化数值
      """
      KmSum=max(dataSet[0,:]) - min(dataSet[0,:])
      gameSum=max(dataSet[1,:]) - min(dataSet[1,:])
      moneySum=max(dataSet[2,:]) - min(dataSet[2,:])
  
      setSum=numpy.array([KmSum, gameSum, moneySum]).reshape(3,1)
  
      dataSet = dataSet/setSum
  
      return dataSet
  
  
  def main():
      dataset,titles=fileToDataset('datingTestSet.txt')
  
      #dataset=autoNorma(dataset)
  
      m=len(dataset[1,:])
  
      testnum=int(m*(float(1)/5))
  
      metaset=dataset[:,:m-testnum]
      metatitle=titles[:m-testnum]
  
  
      testset=dataset[:,m-testnum:]
      testtitle=titles[m-testnum:]
  
      errorCount=0
  
      for i in range(testnum):
  
          inX=testset[:,i].reshape(3,1)
  
          res = knn.knnGetTitle(inX=inX,dataset=metaset,titles=metatitle, k=3)
  
          print("%d record test : res[%s] is %s" % (i, res, testtitle[i]))
  
          metaset = numpy.hstack((metaset, inX))
          metatitle=numpy.hstack((metatitle, res))
  
          print(metaset)
          print(metatitle)
  
          if res != testtitle[i]:
              errorCount=errorCount+1
  
      print("error count %d of %f" % (errorCount, float(errorCount)/m))
  
  if __name__ == '__main__':
      main()
  
  ```
  
  knn 识别图像方式 :
  
  ```
  #!/usr/bin/env python
  # -*- coding:utf-8 -*-
  # imagelearn.py
  
  import os
  import numpy
  import knn
  
  def image2vertor(dirname):
      dataset=None
      titles=numpy.array([])
  
      for vfile in os.listdir(dirname):
          f=open(name=dirname+"/" + vfile, mode="r")
  
          v_line=numpy.array([])
  
          for v_char in f.read():
              if not v_char.isdigit():
                  continue
  
              v_line = numpy.hstack((v_line, int(v_char)))
  
          if dataset is None:
              dataset = v_line.reshape(1024,1)
          else:
              dataset=numpy.hstack((dataset, v_line.reshape(1024,1)))
  
          tag= int(vfile.split("_")[0])
          titles=numpy.hstack((titles, tag))
      return dataset,titles
  
  
  def main():
      metaset,metatag = image2vertor("trainingDigits")
      testset,testtag=image2vertor("testDigits")
  
  
      print(len(metaset[:,1]))
      print(len(testset[:,1]))
      print(len(metatag))
      print(len(testtag))
  
  
      errorCount=0
      for i in range(len(testtag)):
           res =knn.knnGetTitle(inX=testset[:,i].reshape(1024,1), dataset=metaset, titles=metatag,k=3)
  
           print("%d test result is %s[%s]" % (i, res, testtag[i]))
  
           if res != testtag[i]:
               errorCount=errorCount+1
  
      print("error count is %d of %f" % (errorCount, errorCount/float(len(testtag))))
  
  if __name__ == '__main__':
      main()
  
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-11-07T14:01:13.615Z"
updatedAt: "2017-11-10T08:30:04.466Z"
