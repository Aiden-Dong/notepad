type: "MARKDOWN_NOTE"
folder: "50a801ae3cc972d1a4c3"
title: "4-控制结构和函数"
content: '''
  ### 4-控制结构和函数
  ---
  
  ### 1.块表达式和赋值
  
  在　scala 中，{} 块包含一系列的表达式，块中最后一个表达式的值就是块的值．形如
  
  ```
   val value = {
    val x = 20
    val y = 40
    x+y
  }
  ```
  
  它的返回值是最后一个块中执行语句的值:
  
  > 注意: 赋值语句返回值为Unit. 即　`x=y=1`　x 的值为 Unit.
  
  ### 2.分支语句　if
  
  scala 的分支语句与java 大致相同．例如可以这样
  
  ```
  val str:String = "test"
  if(str.equals("Test")){
    printf("equals")
  }else{
    printf("can't equals")
  }
  ```
  但是　scala 条件表达式可以具有返回值．
  ```
  var value = if (3>2) 15 else 23
  ```
  > 注意 : 
   
  - 如果在多个分支中具有不同类型的返回值，则他们的公共超类型为 **Any**.
  - 如果确实某个分支，　则相当于返回返回一个　Unit .
  `if(x>0) 1` 相当于　`if(x>0) 1 else ()`
  
  ### 3.循环语句
  
  #### 3.1 while
  
  while 与java 相同:
  ```
  while( i < 10){
    i+=1
  }
  ```
  
  #### 3.2 for 
  
  scala 没有像java一样结构的for循环语句, scala 使用下的scala 循环: `for 1 <- 表达式`
  
  举例：
  ```
  for (i <- 1 to 10 ){
    sum+=i
  }
  ```
  
  - for 循环中添加过滤条件
  
  可以在循环中套用　if 条件过滤某些索引
  
  ```
  for (i <- 1 to 10 if (i%2) != 0){
    sum+=i
  }
  ```
  等价与
  ```
  for(i <- 1 to 10){
    if(i%2 == 0){
      sum += i
    }
  }
  ```
  
  - for 中也可以添加多层表达式
  ```
  for (i <- 1 to 10 ; j <- 1 to 10){
    sum+=i+j
  }
  ```
  等价于在for中嵌套for循环
  ```
  for(i <- 1 to 10){
    for(j <- 1 to 10){
      sum += i+j
    }
  }
  ```
  - for 推导式
  
  在　for 中使用　yield 将构造一个新的集合
  ```
  val value = for (i <- 1 to 10 ) yield {
      sum += i;
      sum
  }
  ```
  
  ### 4. 函数
  
  必须要给出所有参数的类型.不过，只要函数不是递归的，就不需要指定返回值的类型．
  
  ```
  def sum(num:Int):Int = {
    var sum = 0
    for (i <- 1 to num){
      sum += i
    }
    sum
  }
  ```
  > 默认参数:
  
  scala 也可以提供像　c++ 一样提供默认参数 `def sum(num:Int, baseValue:Int=1):Int`
  
  > 变长参数:
  
  scala 可以使用　`参数名:参数类型*` 的方式来提供变长参数的功能.
  
  ```
  def dataGet(datas:Any*):Unit = {
    for (data <- datas){
      if(data.isInstanceOf[String]){
        println("String")
      }else if(data.isInstanceOf[Int]){
        println("Int")
      }else if(data.isInstanceOf[Double]){
        println("double")
      }else if(data.isInstanceOf[Byte]){
        println("Byte")
      }else{
        println("Other")
      }
    }
  }
  ```
  
  ### 5. 异常
  
  scala 异常处理类似于 java, 可以使用`try`, `catch`, `finally`来处理异常．
  
  ```
  try{
    testException()
  }catch {
    case _:IllegalArgumentException =>{
      println("IllegnalArgument")
    }
    case ex :IOException => ex.printStackTrace()
  }finally {
    println("finish")
  }
  ```
  scala 没有"首检"的异常--无需在函数或方法声明中提供可能抛出的某种异常．
  ```
  def testException():Unit = {
    throw new IllegalArgumentException("hello")
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-06T09:45:54.707Z"
updatedAt: "2018-03-27T08:48:02.946Z"
