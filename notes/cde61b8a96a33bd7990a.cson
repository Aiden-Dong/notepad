type: "MARKDOWN_NOTE"
folder: "e6c9bd1f0c13e9eccb37"
title: "5-python 文件操作篇"
content: '''
  ## 5-python 文件操作篇
  ---
  ### 文件读写 :
  
  ```
  fp = open('FileName', 'model')
  ```
  
  model | 说明
  -- | --
  w | 以写方式打开，
  a | 以追加模式打开 (从 EOF 开始, 必要时创建新文件)
  r+ | 以读写模式打开
  w+ | 以读写模式打开 (参见 w )
  a+ | 以读写模式打开 (参见 a )
  rb | 以二进制读模式打开
  wb | 以二进制写模式打开 (参见 w )
  ab | 以二进制追加模式打开 (参见 a )
  rb+ | 以二进制读写模式打开 (参见 r+ )
  wb+ | 以二进制读写模式打开 (参见 w+ )
  ab+ | 以二进制读写模式打开 (参见 a+ )
  
  - 文件读取 : 
  
  ```
  fp.read([size])       # size为读取的长度，以byte为单位
  fp.readline([size])   # 读一行，如果定义了size，有可能返回的只是一行的一部分
  for v_line in fp :    # 遍历
  fp.readlines([size])  # 把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长，也就是说可能只读到文件的一部分。
  
  # size - 表示每次读取到的内容
  # 返回值为 string 类型，当成功读取完成后将返回读取到的字符串， 否则，返回空字符串('') 
  ```
  实例　:
  ```
  #!/usr/bin/env python
  
  import sys
  
  def main():
  
      for v_line in sys.stdin:
  
          v_line=v_line[:-1]
  
          v_ele=v_line.split(":")
          if len(v_ele) != 3:
              continue
  
          print(v_ele[0]+":"+v_ele[1] + "  :  " + str(int(float(v_ele[2]))+1))
  
  if __name__ == '__main__':
      main()
  
  ```
  - 文件写入 :
  ```
  fp.write(str)        # 把str写到文件中，write()并不会在str后加上一个换行符
  fp.writelines(seq)   # 把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入，不会在每行后面加上任何东西。
  ```
  - 其他操作 :
  
  ```
  fp.close()           # 关闭流
  fp.flush()           # 刷写流
  fp.tell()            # 返回文件的当前位置
  fp.next()            # 返回文件的下一字节的数据
  fp.truncate(size)    # 将文件裁成指定的大小
  ```
  
  ### os 模块
  
  ```
  os.getcwd()                     # 得到当前工作目录
  os.listdir(path)                # 返回指定目录下的所有文件和目录名
  os.remove(pathfile)             # 删除一个文件
  os.removedirs()                 # 删除多个目录
  os.mkdir(path)                  # 创建目录
  os.makedirs(path)               # 创建多级目录
  os.rename(oldName, newName)     # 重命名
  os.stat(file)                   # 返回文件信息
  
  os.path.isfile(path)            # 判断是否是文件
  os.path.isdir(path)             # 判断是否是目录
  os.path.isabs(path)             # 判断是否是绝对路径
  os.path.exists(path)            # 判断指定路径是否真实存在
  os.path.split(path)             # 返回路径的目录名和文件名
  os.path.dirname(path)           # 返回路径名
  os.path.basename(path)          # 返回文件名
  os.path.getsize（path）         # 获取文件大小
  ```
  
  ### shutil 模块
  
  ```
  shutil.copyfile("oldfile","newfile")   # 复制文件
  shutil.copy("oldfile","newfile")       # 复制文件和目录
  shutil.copytree("olddir","newdir")     # 复制目录
  shutil.move("oldpos","newpos")         # 移动文件和目录
  shutil.rmtree("dir")                   # 删除目录(包括非空目录)
  ```
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-08-26T11:58:02.747Z"
updatedAt: "2017-09-06T12:07:52.387Z"
