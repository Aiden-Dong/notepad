createdAt: "2018-05-04T03:02:39.918Z"
updatedAt: "2018-05-09T05:32:48.984Z"
type: "MARKDOWN_NOTE"
folder: "becbb124877573c964e3"
title: "2-HotSpot 虚拟机对象探秘"
content: '''
  ### 2-HotSpot 虚拟机对象探秘
  
  ---
  
  #### 对象的创建:
  
  ![image.png](https://upload-images.jianshu.io/upload_images/10402860-363837c7ac8e06f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
  
  1. **虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否在常量池中定位到一个类的符号引用,并且检查这个符号引用代表的类是否已被加载，解析和初始化过。如果没有，首先执行类加载过程。**
  2. 定位到类信息之后开始为java对象申请内存资源。
  
  >  内存的申请有两种方式在这里，选择那种方式是受java堆空间是否规整决定的,java堆是否规整又受**jvm所采用的java虚拟机是否有压缩整理方式决定的**:
  
  ```
  1. 指针碰撞: 针对于堆空间内内存的利用是整齐连续的情况，
  2. 空闲链表: 针对于堆空间内存并不是规整的情况，需要维护关于使用中的内存块与空闲内存块的列表的情况。
  ```
  
  > 对于在**多线程**java程序分配堆内存还需要考虑到同步问题
  
  ```
  第一种解决办法是对分配堆的动作进行同步处理
  第二种解决办法是把内存分配动作按照线程划分在不同的空间中进行，即每个线程在Java堆中预分配一小块内存，称为本地线程分配缓冲(TLAB)
  ```
  
  虚拟机是否使用TLAB可以通过 `-XX:+/-UseTALB`参数来设定
  
  3. 内存分配完成后需要对分配的内存初始化0值(不包括对象头)。
  4. 设置对象的头信息:
  
  对象所属的类实例 |
  如何找到类的元数据信息 |
  对象的Hash码 |
  对象的gc分代年龄信息 | 
  锁状态标识 | 
  线程持有的锁 |
  偏移线程ID |
  偏向时间戳 |
  ---|
  
  5. 执行 **init** 过程，初始化对象信息。
  
  #### 对象的访问定位:
  
  如何才能根据变量字段找到对象实际的堆位置，目前主流的方式是使用句柄和直接指针两种
  
  ##### 1. 使用句柄的访问方式
  
  java 堆将会划分出一块内存来作为句柄池,reference中存放的地址是对象的句柄地址，而句柄中包含了实例数据与类型数据各自的具体地址信息:
  
  ![image.png](https://upload-images.jianshu.io/upload_images/10402860-7ed7c3cdd95252dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
  
  > 优点:
  
  refrence中存放的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据地址，而refrence本身不需要修改。
  **当多个变量引用同一个对象时，对象位置的变动不会引发多个引用同时变动**
  
  ##### 2.  使用直接指针的访问方式
  
  ![image.png](https://upload-images.jianshu.io/upload_images/10402860-b65f84577fe9bdb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
  
  reference 中存储的直接就是对象的地址，在对象的空间中存储着访问类型数据的相关信息。
  
  > 优点:
  
  它节省了一次指针定位的时间开销(相对于句柄来说),由于对象的访问在java中十分频繁，所以这种定位效率较高。
  
  > 在Sun HotSpot 中，使用的是**直接指针**的访问 方式。
  
'''
tags: []
isStarred: false
isTrashed: false
