type: "MARKDOWN_NOTE"
folder: "50a801ae3cc972d1a4c3"
title: "5-类与对象"
content: '''
  ### 5-类与对象
  ---
  
  > 说明：
  
  1. 类自带有 getter 方法和 setter 方法。
  2. 你可以用定制的 getter/setter 方法替换掉字段的定义，而不必修改使用类的客户端 -- 这就是所谓的 "统一访问原则".
  3. 用 @BeanProperty 注解来生成 JavaBeans 的 getXxx/setXxx 方法。
  4. 每个类都有一个主构造器，这个构造器和类定义交织在一起。 它的参数直接成为类的字段。 主构造器执行类体中所有的语句。
  5. 辅助构造器是可选的。 他们叫做 this.
  
  
  #### 字段方法作用域
  
  - 私有权限 :
  
  **private** 关键字用来声明字段或者方法为私有的,不允许子类或者其他类来访问 : `private var sex:String = "boy"`
  
  - 保护权限 :
  
  **protected** 只允许本类及其子类来访问, 不允许其他类访问. : `protected var sex:String = "boy"`
  
  - 包访问权限:
  
  scala 中没有直接的包访问权限但可以通过 : `private[本包名] var ..` 来实现.
  
  > 我们可以使用 `private[包名]` 来允许这个字段或方法让指定的包访问.
   
  - 公共权限:
  
  scala 不加任何修饰的字段和方法默认为公共访问字段(方法) : `var sex:String="boy"`
  
  #### 1. 简单类和无参方法
  
  ```
  class Count {
    /*
    *  类字段
     */
    private var count = 0   
  
    /*
    * 类方法
     */
    def increament():Unit={
      this.count += 1
    }
  
    def current = count
  }
  ```
  
  #### 2. getter 和 setter 的属性
  
  scala 对每个字段都默认提供一个getter和setter 方法， 举例 :
  
  ```
  class Person{
    var age = 0
  }
  ```
  
  scala 生成面向 jvm 的类， 其中有一个私有的age字段以及相应的 getter 和 setter 方法。 这两个方法是公共的。
  
  ```
  class Person{
    var age = 0
    def age = age
    def age_= (new_age:Int):Unit = {
      this.age = new_age
   }
  }
  ```
  自定义 getter 和 setter 方法 :
  
  ```
  class Person{
    private var priAge = 0
    
    def age = priAge
    
    def age_= (new_age:Int):Unit ={
      this.priAge = new_age
    }
  }
  ```
  
  > 说明 :
  
  1. 如果这个字段是私有的， 则 getter 和 setter 也是私有的。
  2. 如果字段是 val ， 则只有 getter 方法被生成
  3. 如果不需要任何的 getter 和 setter ， 则可以将字段声明为 private[this].
  
  
  #### 3. 构造器
  
  scala 中， 主构造器并不以this方法定义， 而是与类定义交织在一起
  
  > 说明 :
  1. 主构造器直接写在类名之后
  2. 主构造器会执行类定义中的所有语句
  
  类中除了有主构造器还可以有辅助构造器
  
  > 说明 :
  1. 辅助构造器的名称为this
  2. 每一个辅助构造器必须以一个先前定义的其他辅助构造器或者主构造器的调用开始
  
  ```
  class Person(private val name:String, private var age:Int) {
     /*
     * 默认字段 ：
     * @param : name    姓名
     * @param : age     年龄
      */
  
    var sex = "boy"
  
    /*
    * 辅助构造器 : 构造类内部定义的 var 类型的变量(字段)
    */
    def this(name:String, age:Int, sex:String){
      this(name, age)
      this.sex = sex // 重定义 var 类型的值
    }
  
    def getMessage():Unit = {
      println(
        "name = " + this.name + "\\n" +
        "age = " + this.age + "\\n" +
        "sex = " + this.sex
      )
    }
  }
  ```
  
  
  #### 4. 单例对象
  
  scala 没有静态方法或者静态字段，可以使用 object 来达到相同的目的。
  
  > 说明 :
  
  1. 不能提供构造参数
  2. 作为存放工具函数或常亮的地方
  3. 高效的共享单个不可变的实例
  4. 需要用单个实例来协调某个服务时
  
  ```
  object Count {
  
    /*
    *  类字段
     */
    private var count:Int = 0
  
    def increament():Unit={
      this.count += 1
    }
  
    def current = count
  }
  ```
  
  #### 5. 伴生对象
  
  当我们及需要实例方法又需要静态方法的时候我们需要创建**伴生对象**, 我们通过命名 Object 与 class 同名来实现.
  
  > 说明 :
  
  - 类和它的伴生对象可以相互访问私有特性.
  
  
  ```
  class Person(val name:String, val age:Int) {
  
    Person.increment()
  
     /*
     * 默认字段 ：
     * @param : name    姓名
     * @param : age     年龄
      */
  
    var sex = "boy"
  
    def this(name:String, age:Int, sex:String){
      this(name, age)
      this.sex = sex // 重定义 var 类型的值
    }
  
  
    def getMessage():Unit = {
      println(
        "name = " + this.name + "\\n" +
        "age = " + this.age + "\\n" +
        "sex = " + this.sex + "\\n" +
        "count = " + Person.current
      )
    }
  
  }
  
  object Person{
  
    private var count = 0
  
  
    def increment():Unit = {
      count += 1
    }
  
    def current = count
  
  }
  ```
  > apply 方法
  
  单例对象不允许拥有构造函数, 但有时需要使用形如 `Object(参数1, ..,参数 n)` 这样的形式调用.
  
  通常情况下使用apply是用作返回伴生类的对象.
  
  ```
  object Person{
    def apply(name:String, age:Int): Person = new Person(name, age)
  }
  
  class Person(var name:String, var age:Int){
  
    def getName():String = name
  
    def setName(name:String):Unit = {
      this.name = name
    }
  
    def getAge():Int = age
  
    def setAge(age:Int):Unit = {
      this.age = age
    }
  
    override def toString:String ={
      "name=" + this.name+"\\nage="+this.age
    }
  }
  ```
  
  这样可以使用如下的方式去创建了类 :
  
  ```
  def start(): Unit = {
    val person:Person = Person("name", 20);
    println(person)
  }
  ```
  
  #### 6. 应用程序对象
  
  每一个scala 程序需要从一个对象的main方法开始.
  
  相比于java的
  
  ```
  public static void main(String[] args){
      System.out.println("Hello world");
  }
  ```
  
  scala 可以在单例对象中使用:
  
  ```
  def main(args: Array[String]): Unit = {
    System.out.println("hello world")
  }
  ```
  
  > 除了可以每次提供自己的`main`方法意外, 我们可以扩展App特性,然后将程序代码放入构造器方法内:
  
  - 如果我们需要命令行参数,则可以通过`args`变量得到
  - 如果我们想要获取运行时间,可以通过 `-Dscala.time`获取
  
  ```
  class ScalaApp extends App{
    if(args.length < 2){
      System.out.println("you should input parm")
    }
    System.out.println("Hello world")
  }
  ```
  
  #### 7. 枚举类型
  
  scala 没有自己的枚举类型,我们需要定义一个扩展的`Enumeration`类的对象并以Value方法调用来初始化枚举类的所有值:
  
  ```
  object EnumType extends Enumeration{
    val Red, Yellow,Green = Value
  }
  ```
  
  这样相当于 
  
  ```
  object EnumType extends Enumeration{
    val Red = Value
    val Yellow = Value
    val Green = Value
  }
  ```
  
  等价于
  
  ```
  object EnumType extends Enumeration{
    val Red = Value(1, "Red")
    val Yellow = Value(2, "Yellow")
    val Green = Value(3,"Green")
  }
  ```
  
  #### 8.继承
  
  - scala 的继承使用 **extends** 关键字,
  - 如果将类声明为 **final**, 则类不能被继承.如果将变量或方法声明为 **final**, 则变量不能被覆盖.
  - 重写方法使用 **override** 修饰符
  - 如果在重写方法中需要调用超类的方法使用**super**关键字
  - 超类构造器需要在子类构造器的最开始调用.
  
  > 继承实例 :
  
  ```
  //Person类
  class Person(name:String,age:Int){
  
  }
  
  //Student继承Person类
  class Student(name:String,age:Int,var studentNo:String) extends Person(name,age){
  
  }
  
  object demo{
    def main(args: Array[String]): Unit = {
  
       val student=new Student("john",18,"1024")
    }
  }
  ```
  
  > 构造器的顺序:
  
  下面的代码演示scala在继承的时候，构造函数的执行顺序：
  
  ```
  //Person类
  class Person(name:String,age:Int){
    println("Constructing Person")
  }
  
  //Student继承Person类
  class Student(name:String,age:Int,var studentNo:String) extends Person(name,age){
    println("Constructing Student")
  }
  
  object demo{
    def main(args: Array[String]): Unit = {
       //下面的语句执行时会打印下列内容
       //Constructing Person
       //Constructing Student
       //也就是说，构造Student这前，首先会调用Person的主构造方法
       val student=new Student("john",18,"1024")
    }
  }
  ```
  
  #### 9. 匿名子类
  
  与java相同,我们可以通过定义,或者重写代码块的方法来创建子类
  
  ```
  val student = new Person("one", 20){
    def getMessage() :Unit = {
      println(this.toString)
    }
  }
  student.getMessage()
  ```
  
  ####  10.抽象类
  
  与java相同,scala可以通过 **abstract**来声明抽象类
  
  ```
  abstract class AbPerson {
    def getName():String
    def setName(name:String):Unit
  }
  ```
  
  > 实例化
  ```
  class Person(private var name:String, private var age:Int)extends AbPerson{
  
    override def getName():String = name
  
    override def setName(name:String):Unit = {
      this.name = name
    }
  
    def getAge():Int = age
  
    def setAge(age:Int):Unit = {
      this.age = age
    }
  
    override def toString:String ={
      "name=" + this.name+"\\nage="+this.age
    }
  }
  ```
  
  #### 11. 多态与动态绑定
  **多态**(Polymorphic)也叫**动态绑定**(Dynamic Binding)、**迟绑定**(Late Binding)，指在执行期间（而非编译期间）判断所引用对象的实际类型，根据其实际类型调用其相应的方法。
  即指子类的引用可以赋给父类，程序在运行时根据实际类型调用对应的方法 
  
  下面的代码演示了scala中的多态与动态绑定：
  
  ```
  //抽象Person类
  abstract class Person(var name:String,var age:Int){
  
    def walk():Unit
    //talkTo方法，参数为Person类型
    def talkTo(p:Person):Unit
  }
  
  class Student(name:String,age:Int) extends Person(name,age){
    private var studentNo:Int=0
    def walk()=println("walk like a elegant swan")
    //重写父类的talkTo方法
    def talkTo(p:Person)={
      println("talkTo() method in Student")
      println(this.name+" is talking to "+p.name)
    }
  }
  
  class Teacher(name:String,age:Int) extends Person(name,age){
    private var teacherNo:Int=0
  
    def walk()=println("walk like a elegant swan")
  
     //重写父类的talkTo方法
    def talkTo(p:Person)={
      println("talkTo() method in Teacher")
      println(this.name+" is talking to "+p.name)
    }
  }
  
  object demo{
    def main(args: Array[String]): Unit = {
  
       //下面的两行代码演示了多态的使用
       //Person类的引用可以指向Person类的任何子类
       val p1:Person=new Teacher("albert",38)
       val p2:Person=new Student("john",38)
  
       //下面的两行代码演示了动态绑定
       //talkTo方法参数类型为Person类型
       //p1.talkTo(p2)传入的实际类型是Student
       //p2.talkTo(p1)传入的实际类型是Teacher
       //程序会根据实际类型调用对应的不同子类中的talkTo()方法
       p1.talkTo(p2)
       p2.talkTo(p1)
    }
  }
  ```
  
  ### 12 - 组合与继承的使用
  
  继承可以重用父类的代码，从而简化程序设计，**继承是is-a的关系**，`apple is a kind of fruit（苹果是一种水果）`。
  
  还有一种代码重用的方式是组合，**组合是has-a的关系**（one person has a head）。
  
  继承在前面已经讲了，这边只给出组合的使用代码：
  
  
  ```
  class Head
  class Body
  class Hand
  //....
  
  //Person类
  abstract class Person(var name:String,var age:Int){
    //各类的实例作为该类对象的一部分，通过各类的实例方法实现代码重用
    val head:Head=null  
    val body:Body=null
    val hadn:Hand=nulll
    //....
  }
  ```
  
  #### 继承与组合使用总结：
  
  1.继承
  
  继承是Is a的关系，比如说Student继承Person,则说明Student is a Person。**继承的优点是子类可以重写父类的方法来方便地实现对父类的扩展**。 
  
  > 继承的缺点有以下几点： 
  
  1. 父类的内部细节对子类是可见的。 
  2. 子类从父类继承的方法在编译时就确定下来了，所以无法在运行期间改变从父类继承的方法的行为。 
  3. 如果对父类的方法做了修改的话（比如增加了一个参数），则子类的方法必须做出相应的修改。所以说子类与父类是一种高耦合，违背了面向对象思想。
  
  2 组合
  
  组合也就是设计类的时候把要组合的类的对象加入到该类中作为自己的成员变量。
  
  > 组合的优点： 
  
  1. 当前对象只能通过所包含的那个对象去调用其方法，所以所包含的对象的内部细节对当前对象时不可见的。 
  2. 当前对象与包含的对象是一个低耦合关系，如果修改包含对象的类中代码不需要修改当前对象类的代码。 
  3. 当前对象可以在运行时动态的绑定所包含的对象。可以通过set方法给所包含对象赋值。 
  
  > 组合的缺点： 
  
  1. 容易产生过多的对象。 
  2. 为了能组合多个对象，必须仔细对接口进行定义。 
  
  > 由此可见，组合比继承更具灵活性和稳定性，所以在设计的时候优先使用组合。只有当下列条件满足时才考虑使用继承： 
  
  1. 子类是一种特殊的类型，而不只是父类的一个角色 
  2. 子类的实例不需要变成另一个类的对象 
  3. 子类扩展，而不是覆盖或者使父类的功能失效
  
  
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-10T07:33:24.049Z"
updatedAt: "2018-03-26T02:51:52.541Z"
