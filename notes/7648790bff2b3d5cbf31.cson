type: "MARKDOWN_NOTE"
folder: "50a801ae3cc972d1a4c3"
title: "11-高阶函数"
content: '''
  ### 11-高阶函数
  
  ---
  
  - 在 scala 中， 我们无法直接操作方法， 可以直接操作函数
  
  
  ### 1-匿名函数
  
  创建一个匿名函数的方式 : `(参数) => 表达式`
  
  例如 :
  
  ```
  (x:Double) => x*3
  ```
  So : 
  
  
  `val tripe = (x:Double) => x*3` <==> `def tripe(x:Double) = x*3`
  
  ### 2- 函数作为参数或者返回值
  
  > 函数参数 : 
  
  ```
  def getValue(x:Double, func:(Double)=>Double) = func(x)
  ```
  
  > 函数返回值 : 
  
  ```
  def getVale(x:Double):(Double)=>Double = (factory:Double)=>x*factory
  
  
  <=>
  
  def getValue(x:Double) = (factory:Double) => factory*x
  ```
  
  
  ### 3- scala 参数类型推断
  
  - 当我们将一个匿名函数传递给另一个函数或者方法的时候，  scala 会尽可能帮助你推断出类型信息。
  - 如果参数在  => 右侧只出现一次， 我们就可以用 _ 替换掉它。
  
  ```
  def getValue(func:(Double)=>Double)
  ```
  
  则 :
  
  ```
  getVale((x:Double)=>3*x)
  
  简化成 :
  getValue((x)=>3*x)  
  => getValue(x=>x*x)
  => getValue(3*_)          
  ```
  
  注意的是简写只在参数类型已知的情况下有效:
  
  ```
  val func = x*_           # error
  val func = x*(_:Double)  # ok
  val func:(Double)=>Double = 3*_
  ```
  
  错误例子：
  
  ```
  def test[A](a: List[A], f: A => A) = a.map(f)
  
  println(test(List(1,2,3), _*2))
  
  error: missing parameter type for expanded function ((x$2) => x$2.$times(2))
  ```
  
  为什么在这里第二个函数中A却无法参数识别呢？
  
  根据scala的参数类型推断，流程是从左到右，从参数到参数。在这个例子中，参数之间类型推断是不可行的。
  
  那如何修改呢？我们先看下面的知识点。
  
  
  ### 4- 柯里化
  
  - 柯里化指的是将原来 接受两个参数的函数变成新的接受一个参数的函数的过程。
  
  ```
  def addTwo(x:Int) = (y:Int)=>x+y
  ```
  
  这里函数接受一个参数，生成另一个接受参数的函数。
  
  如果我们需要计算两个参数的和， 我们需要 `addTwo(2)(3)`
  
  分开来说明， 则 `addTwo(2)` 返回的是 `2+_` 的函数， 这个函数应用到 3 , 则返回 5;
  
  scala 支持简写 :
  
  ```
  def addTwo(x:Int)(y:Int) = x+y
  ```
  
  在这里，我们可以应用柯里化，把其中的一个函数单独另出来，以便提供参数推断的信息。
  
  所以在第一部分中讲的那个错误的例子可以改写成：
  
  ```
  def test[A](a: List[A])(f: A => A) = a.map(f)
  test(List(1))(_+1)
  ```
  
  done.
  
'''
tags: []
isStarred: false
isTrashed: false
createdAt: "2017-09-27T08:56:04.770Z"
updatedAt: "2017-09-30T07:19:54.895Z"
