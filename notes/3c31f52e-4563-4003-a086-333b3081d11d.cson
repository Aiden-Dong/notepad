createdAt: "2018-03-20T09:29:56.810Z"
updatedAt: "2018-11-15T02:23:45.882Z"
type: "MARKDOWN_NOTE"
folder: "5ebd9b00f5963387cb73"
title: "Servlet篇 (1) 之Servlet基础内容"
content: '''
  ### Servlet篇 (1) 之Servlet基础内容
  ---
  
  ### 1.servlet的基本组成
  ```
  import java.io.IOException;
  import javax.servlet.ServletConfig;
  import javax.servlet.ServletException;
  import javax.servlet.http.HttpServlet;
  import javax.servlet.http.HttpServletRequest;
  import javax.servlet.http.HttpServletResponse;
  
  public class ServMain extends HttpServlet {
  
  	// 程序的初始化
  	@Override
  	public void init() throws ServletException {
  		// TODO Auto-generated method stub
  		System.out.print("初始化 -- 无参");
  		super.init();
  	}
  
  	@Override
  	public void init(ServletConfig config) throws ServletException {
  		// TODO Auto-generated method stub
  		System.out.println("初始化 -- 含参");
  		super.init(config);
  	}
  
  	// 接受客户的post请求
  	@Override
  	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
  		// TODO Auto-generated method stub
  		System.out.println("Post 方法");
  		this.doGet(req, resp);
  	}
  
  	// 接受客户的get请求
  	// 默认的http请求属于get方法， put 出现在表单的put请求中
  	@Override
  	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
  		// TODO Auto-generated method stub
  		
  		System.out.println("Get 方法");
  		//super.doGet(req, resp);
  	}
  	
  	// 释放servlet
  	@Override
  	public void destroy() {
  		// TODO Auto-generated method stub
  		System.out.println("释放");
  		super.destroy();
  	}
  
  }
  
  
  ```
  
  ### 2.servlet的声明周期
  
  
  - **声明全过程：**
      1. 类加载
      2. 实例化: new 对象
  	3. 初始化: init(ServletConfig)
  	4. 处理请求: service doGet doPost
  	5. 退出服务: destroy;
  		
  - **API 中的过程：**
  ```
  init() // 整个过程只被调用一次
  public void init(servletConfig config) throws ServletException
  		
  service()
  public void service(ServletRequest reg, ServletResponse res) throws ServletException, IOException
  		
  destroy()// 在 tomcat shutdown 的时候， 被调用
  public void destroy();  
  
  // 只生成一个对象， 后面访问的都通过这一个对象进行访问，索引访问多次的时候只出现一次 init 方法
  ```		
  
  
'''
tags: []
isStarred: false
isTrashed: false
